<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>一道题理解动态规划、BFS、DFS</title>
    <link href="/2023/04/06/%E7%AE%97%E6%B3%95/%E4%B8%80%E9%81%93%E9%A2%98%E7%90%86%E8%A7%A3%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E3%80%81BFS%E3%80%81DFS/"/>
    <url>/2023/04/06/%E7%AE%97%E6%B3%95/%E4%B8%80%E9%81%93%E9%A2%98%E7%90%86%E8%A7%A3%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E3%80%81BFS%E3%80%81DFS/</url>
    
    <content type="html"><![CDATA[<h1 id="一道题理解动态规划、BFS、DFS"><a href="#一道题理解动态规划、BFS、DFS" class="headerlink" title="一道题理解动态规划、BFS、DFS"></a>一道题理解动态规划、BFS、DFS</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h2><p>这里有一道能同时被动归、BFS、DFS解决的问题：</p><blockquote><p>给定一个m*n的网格和一个机器人的初始位置（0,0），机器人每次只能向下或者向右移动一步，问有多少种不同的路径可以到达网格右下角？</p></blockquote><hr><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a><strong>动态规划</strong></h2><p>自然语言过程：定义二维表，初始化，两个for，return</p><p>口诀：表，初，for，return【表初 for return】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">uniquePaths</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-comment">//定义状态数组dp，dp[i][j]表示从(0,0)到(i,j)的不同路径数</span><br>    <span class="hljs-type">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m][n];<br>  <br>    <span class="hljs-comment">//初始化第一行和第一列，因为只能向右或向下走，所以这些位置的路径数都是1</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>        dp[<span class="hljs-number">0</span>][j] = <span class="hljs-number">1</span>;<br>    &#125;<br>  <br>    <span class="hljs-comment">//动态规划求解</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt; n; j++)&#123;<br>            dp[i][j] = dp[i-<span class="hljs-number">1</span>][j] + dp[i][j-<span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>  <br>    <span class="hljs-comment">//返回最终结果，即从(0,0)到(m-1,n-1)的路径数</span><br>    <span class="hljs-keyword">return</span> dp[m-<span class="hljs-number">1</span>][n-<span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a><strong>BFS</strong></h2><p>BFS是用队列加塞的方式顺带记录遍历探索的分支</p><p>自然语言过程：创建队列，添加起点，初始化计数器，非队空时循环，弹一个我就末尾计数，或者探索这个的周围并加塞</p><p>口诀：声明队列，起点加塞，计数器，非空循环，弹一个计数或者探索周围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BFS</span> &#123;<br>    <span class="hljs-comment">// 定义一个方法，用来计算机器人在网格中从起点走到终点的路径数量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">uniquePaths</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-comment">// 创建一个队列，用来存储位置信息</span><br>        Queue&lt;<span class="hljs-type">int</span>[]&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        <span class="hljs-comment">// 将起点(0,0)添加到队列中</span><br>        queue.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;);<br>        <span class="hljs-comment">// 定义一个变量，用来计数路径的数量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 当队列不为空时循环，即还有位置未被搜索</span><br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-comment">// 取出队列中的一个位置信息</span><br>            <span class="hljs-type">int</span>[] cur = queue.poll();<br>            <span class="hljs-comment">// 如果该位置是终点，则将路径计数器加1</span><br>            <span class="hljs-keyword">if</span> (cur[<span class="hljs-number">0</span>] == m - <span class="hljs-number">1</span> &amp;&amp; cur[<span class="hljs-number">1</span>] == n - <span class="hljs-number">1</span>) &#123;<br>                count++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 否则，将当前位置向下或向右移动，并将可能到达的位置添加到队列中</span><br>                <span class="hljs-keyword">if</span> (cur[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span> &lt; m) &#123;<br>                    queue.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;cur[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>, cur[<span class="hljs-number">1</span>]&#125;);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (cur[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span> &lt; n) &#123;<br>                    queue.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;cur[<span class="hljs-number">0</span>], cur[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>&#125;);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 返回计数器中存储的路径数量</span><br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-comment">// 主方法，用于测试uniquePaths方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建一个BFS对象</span><br>        <span class="hljs-type">BFS</span> <span class="hljs-variable">solution</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BFS</span>();<br>        <span class="hljs-comment">// 输出机器人在7 x 9网格上移动时到达右下角的不同路径数量</span><br>        System.out.println(solution.uniquePaths(<span class="hljs-number">7</span>,<span class="hljs-number">9</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a><strong>DFS</strong></h2><p>DFS用递归的方式，在栈中记录下探索的分支</p><p>自然语言过程：dfs函数，形参输入起点，如果到终点就计数且return，如果往下或者往右不越界就dfs下一个或者右一个</p><p>定义dfs函数：以形参做起点，如果终点计数加return，不越界就dfs下一个位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DFS</span>&#123;<br>    <span class="hljs-comment">// 定义网格的行数和列数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> m, n;<br>    <span class="hljs-comment">// 定义计数器，用来记录不同路径的数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">uniquePaths</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-comment">// 初始化网格的行数和列数</span><br>        <span class="hljs-built_in">this</span>.m = m;<br>        <span class="hljs-built_in">this</span>.n = n;<br>        <span class="hljs-comment">// 从起点（0,0）开始搜索</span><br>        dfs(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 返回最终结果</span><br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-comment">// 如果到达终点，计数器加1</span><br>        <span class="hljs-keyword">if</span> (x == m - <span class="hljs-number">1</span> &amp;&amp; y == n - <span class="hljs-number">1</span>) &#123;<br>            count++;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 向右移动一步，如果没有越界，继续搜索</span><br>        <span class="hljs-keyword">if</span> (x + <span class="hljs-number">1</span> &lt; m) &#123;<br>            dfs(x + <span class="hljs-number">1</span>, y);<br>        &#125;<br><br>        <span class="hljs-comment">// 向下移动一步，如果没有越界，继续搜索</span><br>        <span class="hljs-keyword">if</span> (y + <span class="hljs-number">1</span> &lt; n) &#123;<br>            dfs(x, y + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">DFS</span> <span class="hljs-variable">solution</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DFS</span>();<br>        System.out.println(solution.uniquePaths(<span class="hljs-number">4</span>,<span class="hljs-number">11</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>BFS是弹一个我就探索这个的周围并加塞，DFS是达不到我就递归</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二分查找</title>
    <link href="/2023/04/06/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2023/04/06/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h2><hr><p><strong>二分算法解决问题的使用条件</strong></p><ol><li>有序：数据必须是有序的，不管是顺序表还是链，这不必多说</li><li>二段性：二分算法的判断条件必须具有二段性，通常是 “&gt;” 或 “&lt;”，人话说就是可以分为两部分，也可以说“查找的目标元素可以进行比较操作”</li></ol><blockquote><p><em>在算法题中，用二分算法解决问题的充分条件是什么？</em></p><ol><li>数据具有单调性：二分算法适用于有序数组或者单调性强的问题。在这种情况下，可以通过比较中间值和目标值的大小关系，排除一半的数据。</li><li>数据量较大：如果数据量较小，直接遍历整个数组即可。但如果数据量较大，二分算法可以节省大量时间复杂度，使算法效率更高。</li><li>没有重复元素：二分算法是基于元素唯一性的。如果存在重复元素，可能会出现一些问题，例如无法确定查找结果的唯一性。</li><li>可以随机访问元素：二分算法需要能够随机访问数组中的元素。如果数据结构不支持随机访问，例如链表，二分算法就无法使用。</li></ol></blockquote><hr><h2 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a><strong>模板代码</strong></h2><p>题目：</p><blockquote><p><em>一道二分查找题</em></p><p>题干：满足 N ! 的末尾恰好有 K 个 0 的最小的 N 是多少?如果这样的 <em>N</em> 不存在输出 −1。</p><p>输入格式：一个整数K</p><p>输出格式：一个整数代表答案</p><p>样例输入：2</p><p>样例输出：10</p></blockquote><p>标准答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-comment">// 1:无需package</span><br><span class="hljs-comment">// 2: 类名必须Main, 不可修改</span><br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-comment">//求阶乘末尾0的个数其实就是求阶乘因子中5的个数</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">calc</span><span class="hljs-params">(<span class="hljs-type">long</span> x)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(x!=<span class="hljs-number">0</span>) &#123;<br>            res=res+x/<span class="hljs-number">5</span>;<br>            x/=<span class="hljs-number">5</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//二分查找</span><br>        Scanner scanner=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">long</span> k=scanner.nextLong();<br>        <span class="hljs-type">long</span> l=<span class="hljs-number">1</span>,r=Long.MAX_VALUE-<span class="hljs-number">5</span>;<span class="hljs-comment">//l为最左边，r为最右边</span><br>    <br>        <span class="hljs-keyword">while</span>(l&lt;r) &#123;<br>            <span class="hljs-type">long</span> mid=(l+r)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(k&lt;=calc(mid)) &#123;<br>                r=mid;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                l=mid+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(calc(r)!=k) &#123;<br>            System.out.print(-<span class="hljs-number">1</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.print(r);<br>        &#125;<br>    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>答案代码中，关于二分查找的分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//二分查找规定要求f(x)中的x是有序的</span><br><br><span class="hljs-comment">//规定一个最小值和最大值的指针，但要注意后续两者相加后是否会超过基本数据类型范围上限</span><br><span class="hljs-comment">//在此题中，l为最左边下标，r为最右边下标</span><br><span class="hljs-type">long</span> l=<span class="hljs-number">1</span>,r=Long.MAX_VALUE-<span class="hljs-number">5</span>;<br><br><span class="hljs-comment">//当左下标小于右下标时循环</span><br><span class="hljs-keyword">while</span>(l&lt;r) &#123;<br><span class="hljs-comment">//每次循环之前算出中下标</span><br><span class="hljs-type">long</span> mid=(l+r)/<span class="hljs-number">2</span>;<br><br><span class="hljs-comment">//如果中下标的值，在题目要求中偏小，把左下标的值更新为中下标</span><br><span class="hljs-keyword">if</span>(k&lt;=calc(mid)) &#123;<br>r=mid;<br>&#125;<span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//如果偏大，把右下标的值，更新为左下标</span><br>l=mid+<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h2 id="关于被查找的数组元素总数奇偶性的理解"><a href="#关于被查找的数组元素总数奇偶性的理解" class="headerlink" title="关于被查找的数组元素总数奇偶性的理解"></a><strong>关于被查找的数组元素总数奇偶性的理解</strong></h2><p>GPT关于被查找的数组元素个数奇偶性的理解是：</p><p>一句话就是，以上模板无论数组元素个数是奇是偶都适用，不过当元素个数为奇则最后只会剩下一个元素没有争议；元素个数为偶时最后剩下两个元素，两者都有可能是要找的目标</p><blockquote><p>这个二分查找算法是适用于所有元素个数为正整数的有序数组，无论数组元素个数是奇数还是偶数都可以使用这个模板。<br>对于奇数个元素的数组，最后剩下的中间元素就是要查找的元素；<br>对于偶数个元素的数组，则最后剩下的两个中间元素中任意一个都可能是要查找的元素。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vim极简命令手册</title>
    <link href="/2023/04/06/Vim&amp;&amp;Neovim/Vim%E6%9E%81%E7%AE%80%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/"/>
    <url>/2023/04/06/Vim&amp;&amp;Neovim/Vim%E6%9E%81%E7%AE%80%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="Vim极简命令手册"><a href="#Vim极简命令手册" class="headerlink" title="Vim极简命令手册"></a>Vim极简命令手册</h1><h2 id="前言和概述"><a href="#前言和概述" class="headerlink" title="前言和概述"></a>前言和概述</h2><p>作为一个大学生，在vim学习中感到初学者平常学一两个命令是没用的，vim的入门第一步必须快速掌握一批能够足够日常编辑文本使用的命令，如增删改查、跳转光标……这样才能够让vim在工作学习中成功发动，进而在使用中熟能生巧、拓展学习其他的快捷键。</p><p>以下都是在正常模式下的命令，即按下Esc所进入的模式，这个模式是Vim的精要，掌握了这些移动光标、切换插入模式、复制粘贴、增改删查、退出，基本能入门使用Vim。</p><hr><h2 id="正常模式"><a href="#正常模式" class="headerlink" title="正常模式"></a>正常模式</h2><p>定位光标：</p><ol><li>逐个字符移动：hjkl，左下上右，不用去死记，有个简单的记忆方法，这四个字母恰好是键盘上的同一排，这排字母中最左边的h和最右边的h和l恰好对应是左右的意思，只需要记住j和k是下和上即可，进阶用法就是加上前缀数字，比如3j</li><li>gg&#x2F;G：移动到文档头（gg）和移动到文档尾（G），进阶用法就是行号+gg调到指定行【文档移动】</li><li>control+f&#x2F;b：翻页【页移动】</li><li>移动到这一行的首尾：行首0行尾$。值得注意的是，所谓行尾位置是不包括最后一个字符的，最后一个字符那个位置你永远移动不到【行移动】</li><li>wb：前后移动一个单词【行内移动】</li><li>f&#x2F;F+字母：光标移动到后文（使用f）或前文（使用F）中最近的第一个字母之前，进阶用法是这条命令执行之后，还能使用n或者N移动到第二个字母。这个f&#x2F;F命令其实也可以用更强大的&#x2F;和?平替【行内移动】</li></ol><p>进入插入模式：</p><ol><li>ia：i是光标本体位置，即在当前位置原地插入，即方块光标的左边缘位置。a则是在当前位置后一个字符插入，即方块光标的右边缘位置</li><li>IA：I是在行首插入，A是在行尾插入</li><li>oO：o在下一行插入，O在上一行插入</li></ol><p>复制粘贴：</p><ol><li>yy：复制1行，进阶用法就是带数字，例如2yy复制2行【行复制】</li><li>可视模式：v+上文中的“定位光标”命令，可以对文本进行选中，然后按y复制，按d剪切【精确复制】</li><li>dd和dj：行剪切操作。其实dd就是剪切一行了，dj是剪切本行加上下一行，值得一提的是，不管是dd还是dj，都会把删除的东西放进剪切板【行剪切】</li><li>p：在方块光标的右边缘位置粘贴。记住如果是使用yy复制的行，粘贴的时候则会另起一行贴上去，这就是为什么有时候初学者会感到粘贴不好用，对按p之后粘贴的位置不清楚【粘贴】</li><li>ddp：交换当前行和下一行【行交换】</li><li>xp：交换当前字符和下一个字符【字符交换】</li></ol><p>删除：</p><ol><li>dd：删除一行。进阶用法就是加数字d3d删除三行，还有dj删除上一行dk删除下一行【删除行】</li><li>dw：删除一个单词。进阶用法就是加数字d3w删除三个单词，不过控制或者说数单词个数还需要研究一下什么叫单词【删除单词】</li><li>x：删除一个字符。进阶用法就是加数字3x删除三个字符【删除字】</li></ol><p>把命令重复多遍：数字+命令即可，通常用于插入多个同样的字符比如3 a!<code>&lt;esc&gt;</code></p><p>查找替换：</p><ol><li>替换：:％s&#x2F;abc&#x2F;def&#x2F;g把所有的 abc 替换为 def</li></ol><p>退出：</p><ol><li>快速保存并退出：ZZ</li><li>放弃更改重新打开本文件：:e!</li></ol><p>感谢阅读</p>]]></content>
    
    
    <categories>
      
      <category>Vim&amp;NeoVim</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>宝贝，来春天玩</title>
    <link href="/2023/04/06/%E8%AF%97/%E5%AE%9D%E8%B4%9D%EF%BC%8C%E6%9D%A5%E6%98%A5%E5%A4%A9%E7%8E%A9/"/>
    <url>/2023/04/06/%E8%AF%97/%E5%AE%9D%E8%B4%9D%EF%BC%8C%E6%9D%A5%E6%98%A5%E5%A4%A9%E7%8E%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="镜子"><a href="#镜子" class="headerlink" title="镜子"></a>镜子</h1><p>宝贝，来春天玩</p><p>春天有好多好玩的风，雨，云</p><p>一起携手，在草原上放野</p><p>一起飞翔</p><p>飞掠一无所有的城市</p><p>飞掠平凡庸碌的一辈子</p><p>今天的你就像花儿一样</p><p>你一定在等这一刻绽放等了一辈子</p><p>我早已看到，你心里一定有灿烂的火苗</p>]]></content>
    
    
    <categories>
      
      <category>诗</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>你总说你黝黑</title>
    <link href="/2023/04/06/%E8%AF%97/%E4%BD%A0%E6%80%BB%E8%AF%B4%E4%BD%A0%E9%BB%9D%E9%BB%91/"/>
    <url>/2023/04/06/%E8%AF%97/%E4%BD%A0%E6%80%BB%E8%AF%B4%E4%BD%A0%E9%BB%9D%E9%BB%91/</url>
    
    <content type="html"><![CDATA[<h1 id="你总说你黝黑"><a href="#你总说你黝黑" class="headerlink" title="你总说你黝黑"></a>你总说你黝黑</h1><p>黝黑的皮肤总好过强行变白的脂粉</p><p>你等我跑近时回眸的笑容就在发光</p><p>我想世上应该至少有一半的美好是黝黑的呢</p><p>星空 大地和眼睛</p>]]></content>
    
    
    <categories>
      
      <category>诗</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>愿阳光明媚</title>
    <link href="/2023/04/06/%E8%AF%97/%E6%84%BF%E9%98%B3%E5%85%89%E6%98%8E%E5%AA%9A/"/>
    <url>/2023/04/06/%E8%AF%97/%E6%84%BF%E9%98%B3%E5%85%89%E6%98%8E%E5%AA%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="愿阳光明媚"><a href="#愿阳光明媚" class="headerlink" title="愿阳光明媚"></a>愿阳光明媚</h1><p>愿阳光明媚</p><br/><p>愿1+1＝2</p><br/><p>愿杨奉雪喜欢我</p>]]></content>
    
    
    <categories>
      
      <category>诗</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>忘掉黑暗里的居心叵测</title>
    <link href="/2023/04/06/%E8%AF%97/%E5%BF%98%E6%8E%89%E9%BB%91%E6%9A%97%E9%87%8C%E7%9A%84%E5%B1%85%E5%BF%83%E5%8F%B5%E6%B5%8B/"/>
    <url>/2023/04/06/%E8%AF%97/%E5%BF%98%E6%8E%89%E9%BB%91%E6%9A%97%E9%87%8C%E7%9A%84%E5%B1%85%E5%BF%83%E5%8F%B5%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="忘掉黑暗里的居心叵测"><a href="#忘掉黑暗里的居心叵测" class="headerlink" title="忘掉黑暗里的居心叵测"></a>忘掉黑暗里的居心叵测</h1><p>忘掉黑暗里的居心叵测</p><p>我还想在夜里唱歌</p><p>一首献给我亲爱的母亲</p><p>一首送给我心爱的姑娘</p><br/><p>给母亲的是泪水</p><p>抱歉 人生是一张单程票</p><p>回不来的除了我还有美好的时光</p><p>母亲你的人生是一种差错的人生</p><br/><p>给姑娘的是笑容</p><p>我的笑容让你感到虚伪</p><p>其实你爱不爱我都像漂浮的云彩没有关系</p><p>宽谅一切是上路的前提</p><p>2020年12月09日</p>]]></content>
    
    
    <categories>
      
      <category>诗</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>我不要活太久 五十九岁就可矣</title>
    <link href="/2023/04/06/%E8%AF%97/%E6%88%91%E4%B8%8D%E8%A6%81%E6%B4%BB%E5%A4%AA%E4%B9%85%20%E4%BA%94%E5%8D%81%E4%B9%9D%E5%B2%81%E5%B0%B1%E5%8F%AF%E7%9F%A3/"/>
    <url>/2023/04/06/%E8%AF%97/%E6%88%91%E4%B8%8D%E8%A6%81%E6%B4%BB%E5%A4%AA%E4%B9%85%20%E4%BA%94%E5%8D%81%E4%B9%9D%E5%B2%81%E5%B0%B1%E5%8F%AF%E7%9F%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="我不要活太久-五十九岁就可矣"><a href="#我不要活太久-五十九岁就可矣" class="headerlink" title="我不要活太久 五十九岁就可矣"></a>我不要活太久 五十九岁就可矣</h1><p>我不要活太久 五十九岁就可矣</p><p>人老了真的很可怕</p><p>既要被小孩子教666的含义</p><p>还要被杨奉雪拖去爬泰山</p><br/><p>2020年11月28日</p><p>我不要活得太久</p><p>人老了真的很可怕</p><p>老人睡眠浅显短暂</p><p>假眠不能梦见杨奉雪</p><p>2020年12月07日</p><br/><p>我不要活太久</p><p>人老了真的很可怕</p><p>白发苍苍腿脚不敏</p><p>大千美好不能与妳一一游遍</p><p>2020年12月07日</p>]]></content>
    
    
    <categories>
      
      <category>诗</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>理想</title>
    <link href="/2023/04/06/%E8%AF%97/%E7%90%86%E6%83%B3/"/>
    <url>/2023/04/06/%E8%AF%97/%E7%90%86%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="理想"><a href="#理想" class="headerlink" title="理想"></a>理想</h1><p>我愿意欺骗自己</p><p>阳光是暖的 空气是香的</p><p>烦恼是一只揉皱的纸飞机</p><p>让我们把它用力 扔掉</p><br/><p>在真实之海定锚</p><p>我是一只志于虚幻的独木舟</p><p>海水也不会施舍半分真实的怜悯</p><p>我只信 我的眼泪 比真实更真实</p><br/><p>我为眼泪而活 我的树根</p><p>闭眼就能看见 金色的岛屿</p><p>2019.8.28</p>]]></content>
    
    
    <categories>
      
      <category>诗</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>秋水</title>
    <link href="/2023/04/06/%E8%AF%97/%E7%A7%8B%E6%B0%B4/"/>
    <url>/2023/04/06/%E8%AF%97/%E7%A7%8B%E6%B0%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="秋水"><a href="#秋水" class="headerlink" title="秋水"></a>秋水</h1><p>秋水是一种纯洁的颜料，涂抹你的心里，洁白</p><p>我站在小雨的九月，不会祈求命运赐予任何</p><p>抓住一颗星星，我要送给我爱的人</p><p>搏得一朵鲜花，你是一种无言的芬芳</p><p>磨碎星星和花，和我的喜悦的心情</p><p>带去沉默的信，和一满瓶纯洁的秋水</p><p>愿爱人喜欢这一切，绘制在青空的蓝色纸张</p><p>而我也会握你的手，轻轻呼唤</p><p>一起洗礼吧，在雨中，爱人</p><p>你愿意吗</p><p>2020.9.16</p>]]></content>
    
    
    <categories>
      
      <category>诗</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>路过科师大很多地方</title>
    <link href="/2023/04/06/%E8%AF%97/%E8%B7%AF%E8%BF%87%E7%A7%91%E5%B8%88%E5%A4%A7%E5%BE%88%E5%A4%9A%E5%9C%B0%E6%96%B9/"/>
    <url>/2023/04/06/%E8%AF%97/%E8%B7%AF%E8%BF%87%E7%A7%91%E5%B8%88%E5%A4%A7%E5%BE%88%E5%A4%9A%E5%9C%B0%E6%96%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="路过科师大很多地方"><a href="#路过科师大很多地方" class="headerlink" title="路过科师大很多地方"></a>路过科师大很多地方</h1><p>我们在江西科技师范大学谈恋爱</p><p>在百鸣路牵手</p><p>还在逸夫楼接吻</p><p>以及在河畔谈文学</p><p>约会的时间总过得很快</p><br/><p>在江西科技师范大学谈恋爱</p><p>我们不是第一个</p><p>当依偎的时候 当拥抱的时候 当亲吻的时候</p><p>我觉得连蚂蚁都在谈恋爱</p>]]></content>
    
    
    <categories>
      
      <category>诗</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>野人</title>
    <link href="/2023/04/06/%E8%AF%97/%E9%87%8E%E4%BA%BA/"/>
    <url>/2023/04/06/%E8%AF%97/%E9%87%8E%E4%BA%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="野人"><a href="#野人" class="headerlink" title="野人"></a>野人</h1><p>掸去身上尘埃</p><p>回到潮湿的温暖洞穴</p><p>野人每个毛孔都舒张开来</p><p>感受到了自己存在</p><br/><p>身上的伤口还略微作痛</p><p>但我们不能用爱情来疗伤</p><p>好在尚且不算饥饿</p><p>今天狩猎的收获寥寥</p><p>2021.5.17</p>]]></content>
    
    
    <categories>
      
      <category>诗</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Bitcoin Breaks Above $30K for First Time Since June 2022</title>
    <link href="/2023/04/06/coindesk%E6%AF%8F%E6%97%A5%E4%B8%80%E6%96%87/Bitcoin%20Breaks%20Above%20$30K%20for%20First%20Time%20Since%20June%202022/"/>
    <url>/2023/04/06/coindesk%E6%AF%8F%E6%97%A5%E4%B8%80%E6%96%87/Bitcoin%20Breaks%20Above%20$30K%20for%20First%20Time%20Since%20June%202022/</url>
    
    <content type="html"><![CDATA[<h1 id="Bitcoin-Breaks-Above-30K-for-First-Time-Since-June-2022"><a href="#Bitcoin-Breaks-Above-30K-for-First-Time-Since-June-2022" class="headerlink" title="Bitcoin Breaks Above $30K for First Time Since June 2022"></a>Bitcoin Breaks Above $30K for First Time Since June 2022</h1><ol><li><strong><strong>Bitcoin Breaks Above $30K for First Time Since June 2022</strong></strong><ul><li><p>解析</p><p>这个句子的意思是比特币价格突破了3万美元，这是自2022年6月以来的首次突破。</p><p>语法分析：<br>主语：Bitcoin（比特币）<br>谓语动词：Breaks（突破）<br>副词：Above（在…上方）<br>状语：for First Time Since June 2022（自2022年6月以来的首次）</p><p>同样结构的句子例子：</p><ul><li>The stock market surges above 500 points for the first time since last year.<br>（自去年以来，股市首次上涨超过500点。）</li><li>The team scores a goal in the first 5 minutes for the first time this season.<br>（本赛季，该队在前5分钟首次进球。）</li><li>The company’s revenue reaches $1 million in a month for the first time in its history.<br>（该公司历史上首次一个月的收入达到100万美元。）</li></ul></li></ul></li><li>The move continues a 2023 rally that has now seen the most popular crypto gain more than 80%.<ul><li><p>解析</p><p>这个句子的意思是，这次行动继续了2023年的上涨趋势，现在这种趋势已经使得这种最受欢迎的加密货币上涨了超过80%。</p><p>语法分析：<br>主语：The move（这次行动）<br>谓语动词：continues（继续）<br>宾语从句：that has now seen the most popular crypto gain more than 80%（这个从句是对2023年上涨趋势的进一步描述，包括“看到最受欢迎的加密货币上涨超过80%”）<br>主语：the most popular crypto（最受欢迎的加密货币）<br>谓语动词：gain（上涨）<br>副词：more than（超过）<br>数量词：80%（百分之八十）</p><p>同样结构的句子例子：</p><ul><li>The new policy has resulted in a 50% increase in sales, which is the biggest growth we’ve seen in years.<br>（这项新政策导致销售额增长了50％，这是我们多年来看到的最大增长。）</li><li>The actor’s latest film has already made $100 million at the box office, making it the highest-grossing movie of the year so far.<br>（这位演员的最新电影已经在票房上赚了1亿美元，使其成为迄今为止票房最高的电影。）</li><li>The team’s star player scored five goals in one match, which is a record for the league.<br>（该队的明星球员在一场比赛中进了5个球，这是该联赛的纪录。）</li></ul></li></ul></li><li>Bitcoin (BTC) moved past the $30,000 level for the first time since June 10, 2022 as March’s banking turbulence faded further into the distance and investors grew more optimistic about U.S. central bank monetary policy.<ul><li><p>解析</p><p>这个句子的意思是，由于三月份的银行业动荡进一步淡化，投资者对美国央行货币政策变得更加乐观，比特币（BTC）首次自2022年6月10日以来突破了3万美元关口。</p><p>语法分析：<br>主语：Bitcoin (BTC)（比特币）<br>谓语动词：moved past（突破）<br>宾语：the $30,000 level（3万美元关口）<br>状语从句1：for the first time since June 10, 2022（自2022年6月10日以来的首次）<br>状语从句2：as March’s banking turbulence faded further into the distance and investors grew more optimistic about U.S. central bank monetary policy.（随着三月份的银行业动荡进一步淡化，投资者对美国央行货币政策变得更加乐观。）</p><p>同样结构的句子例子：</p><ul><li>The company’s revenue surpassed $1 million for the first time since the recession in 2008 as the economy began to recover.<br>（随着经济开始复苏，自2008年衰退以来，该公司的收入首次超过100万美元。）</li><li>The team won the championship for the first time in 10 years as their star player returned from injury and led the team to victory.<br>（该队的明星球员从伤病中恢复，并带领球队取得胜利，使该队10年来首次获得冠军。）</li><li>The new technology has revolutionized the industry, as companies have been able to streamline their processes and reduce costs.<br>（由于公司能够简化其流程并降低成本，因此新技术已经彻底改变了该行业。）</li></ul></li></ul></li><li>The largest cryptocurrency by market capitalization was recently trading at $30,237, up 6.75% over the last 24 hours.<ul><li><p>解析</p><p>这个句子的意思是，按市值计算最大的加密货币最近的交易价格为30,237美元，比过去24小时上涨了6.75%。</p><p>语法分析：<br>主语：The largest cryptocurrency（按市值计算最大的加密货币）<br>谓语动词：was trading（正在交易）<br>状语1：recently（最近）<br>状语2：at $30,237（交易价格为30,237美元）<br>状语3：up 6.75% over the last 24 hours（过去24小时上涨了6.75%）</p><p>同样结构的句子例子：</p><ul><li>The famous actor was spotted in a restaurant recently, dining with his family.<br>（这位著名演员最近在一家餐厅被目击，与他的家人一起用餐。）</li><li>The new smartphone was released yesterday, priced at $999 and featuring an improved camera and longer battery life.<br>（这款新智能手机昨天发布，售价为999美元，具有改进的相机和更长的电池寿命。）</li><li>The stock market index closed at a record high today, up 2.5% from yesterday’s close.<br>（股市指数今天收盘创下历史新高，比昨天收盘价上涨了2.5%。）</li></ul></li></ul></li><li>“It’s clear that the market is pricing a slowdown in growth, and in turn a loosening of monetary policy by the Federal Reserve over the course of 2023,” said Richard Mico, the U.S. CEO and chief legal officer of Banxa, a payment-and-compliance infrastructure provider for crypto.<ul><li><p>解析</p><p>这个句子的意思是：“显然市场正在定价预期2023年美联储将会放松货币政策，因为预期经济增长将会放缓，”——这是来自加密货币支付及合规基础设施提供商Banxa的美国首席执行官兼首席法律官Richard Mico的观点。</p><p>语法分析：<br>主语：It（这个主语代指上文提到的情况）<br>谓语动词：is clear（显然）<br>宾语：that the market is pricing a slowdown in growth, and in turn a loosening of monetary policy by the Federal Reserve over the course of 2023（市场正在预期经济增长将会放缓，而2023年美联储将会放松货币政策）<br>插入语：said Richard Mico（Richard Mico说道）<br>定语：the U.S. CEO and chief legal officer of Banxa（Banxa的美国首席执行官兼首席法律官）<br>补语：a payment-and-compliance infrastructure provider for crypto（加密货币支付及合规基础设施提供商）</p><p>同样结构的句子例子：</p><ul><li>It’s obvious that the company is cutting costs in order to stay competitive in the market, and as a result, some employees may be laid off.<br>（显然这家公司正在削减成本以保持市场竞争力，因此可能会有一些员工被裁员。）</li><li>It’s evident that the government is implementing stricter regulations on social media platforms, and as a consequence, some companies may face fines or even be shut down.<br>（很明显政府正在对社交媒体平台实施更严格的监管，因此一些公司可能会面临罚款甚至被关闭的风险。）</li><li>It’s apparent that the weather is getting colder, and as a result, people are wearing more layers and using more heating in their homes.<br>（很显然天气越来越冷，因此人们正在穿更多的衣服，在家里使用更多的暖气。）</li></ul></li></ul></li><li>“For evidence of this, just look at the bond market.”<ul><li><p>解析</p><p>这个句子的意思是：“为了证明这一点，只需要看看债券市场就可以了。”</p><p>语法分析：<br>主语：you（隐含的主语，指的是读者或听众）<br>谓语动词：just look（只需要看）<br>宾语：at the bond market（债券市场）<br>插入语：For evidence of this（作为这一点的证据）</p><p>同样结构的句子例子：</p><ul><li>For proof of her skills, just look at her portfolio of successful projects.<br>（如果要证明她的技能，请看她成功项目的作品集。）</li><li>For confirmation of the appointment, just check your email for the confirmation message.<br>（如果要确认预约，请查看电子邮件中的确认消息。）</li><li>For evidence of the impact of climate change, just look at the increasing frequency of natural disasters worldwide.<br>（如果要证明气候变化的影响，请看全球自然灾害频率的增加。）</li></ul></li></ul></li><li>A check of the bond market shows the U.S. 2-Year Treasury note having fallen to below 4% from a peak above 5% in early March as traders rapidly reversed their expectations of future Fed rate hikes.<ul><li><p>解析</p><p>这个句子的意思是：“对债券市场的检查显示，美国2年期国债收益率已从3月初超过5%的高峰下降到不到4%，因为交易员迅速扭转了对未来美联储加息预期。”</p><p>语法分析：<br>主语：A check of the bond market（对债券市场的检查）<br>谓语动词：shows（显示）<br>宾语：the U.S. 2-Year Treasury note（美国2年期国债收益率）<br>定语从句：having fallen to below 4% from a peak above 5% in early March（从3月初的高峰超过5%下降到不到4%）<br>原因状语从句：as traders rapidly reversed their expectations of future Fed rate hikes（因为交易员迅速扭转了对未来美联储加息的预期）</p><p>同样结构的句子例子：</p><ul><li>A survey of customer satisfaction shows our company’s rating having risen to above 90% from a low of 70% last year.<br>（对客户满意度的调查显示，我们公司的评分已从去年的70%的低点上升到90%以上。）</li><li>A search of the database reveals the company’s profits having doubled in the past year due to increased sales.<br>（对数据库的搜索显示，由于销售增加，公司的利润已在过去一年内翻了一番。）</li><li>An analysis of the data indicates the population of the city having grown by 10% in the last decade due to immigration.<br>（对数据的分析表明，由于移民，过去十年中该城市的人口增长了10%。）</li></ul></li></ul></li><li>“There will likely still be a lot of liquidity injected into the market as a result,” added Mico.<ul><li><p>解析</p><p>这个句子的意思是：“结果可能仍会有大量的流动性注入市场，” Mico补充道。</p><p>语法分析：<br>主语：There（空主语，指代上文提到的情况）<br>谓语动词：will be（将会有）<br>插入语：likely still（很可能仍然）<br>宾语：a lot of liquidity injected into the market（大量的流动性注入市场）<br>原因状语从句：as a result（因此）<br>谓语动词：added（补充道）<br>主语：Mico</p><p>同样结构的句子例子：</p><ul><li>There will likely still be a lot of traffic congestion on the roads despite the city’s efforts to improve public transportation.<br>（尽管城市努力改善公共交通，但道路上仍然可能有很多交通拥堵。）</li><li>There will likely still be a lot of work to be done even if we finish the project ahead of schedule.<br>（即使我们提前完成项目，可能仍有很多工作要做。）</li><li>There will likely still be a lot of uncertainty in the market even if the company’s earnings report is positive.<br>（即使公司的盈利报告是正面的，市场可能仍然存在很多不确定性。）</li></ul></li></ul></li><li>“Already, Bitcoin has been the best-performing asset of 2023, and it usually is the asset that responds most quickly and violently to these kinds of monetary shifts.”<ul><li><p>解析</p><p>这个句子的意思是：“到目前为止，比特币已经是2023年表现最好的资产，而且通常是对这些货币政策变化反应最迅速、最激烈的资产。”</p><p>语法分析：<br>主语：Bitcoin（比特币）<br>谓语动词：has been（一直是）<br>宾语：the best-performing asset of 2023（2023年表现最好的资产）<br>连词：and（同时）<br>主语：it（比特币）<br>副词：usually（通常）<br>谓语动词：is（是）<br>宾语从句：the asset that responds most quickly and violently to these kinds of monetary shifts（对这些货币政策变化反应最迅速、最激烈的资产）</p><p>同样结构的句子例子：</p><ul><li>Already, the stock market has been the most volatile investment of the year, and it usually is the market that reacts most quickly and aggressively to geopolitical events.<br>（到目前为止，股市已经是最具波动性的投资，而且通常是对地缘政治事件反应最迅速、最激烈的市场。）</li><li>Already, the housing market has been the most profitable industry of the year, and it usually is the industry that benefits most from low interest rates.<br>（到目前为止，房地产市场已经是今年最有利可图的行业，而且通常是最受低利率影响的行业。）</li><li>Already, the tech sector has been the most innovative area of the year, and it usually is the sector that produces the most disruptive technologies.<br>（到目前为止，科技领域已经是今年最具创新性的领域，而且通常是生产最具颠覆性技术的领域。）</li></ul></li></ul></li><li>Bitcoin last topped $30,000 on June 10, 2022 as it was on its way down to below $20,000, where it spent large parts of late that year and into the first weeks of 2023.<ul><li><p>解析</p><p>这个句子的意思是：“比特币上一次突破3万美元是在2022年6月10日，当时它的价格正在下跌，最终跌至不到2万美元，并在那年晚些时候和2023年的头几周大部分时间都维持在该价格以下。”</p><p>语法分析：<br>主语：Bitcoin（比特币）<br>谓语动词：last topped（上一次达到顶峰）<br>宾语：$30,000（3万美元）<br>时间状语：on June 10, 2022（在2022年6月10日）<br>连词：as（当时）<br>主语：it（比特币）<br>谓语动词：was（是）<br>介词短语：on its way down（在下跌途中）<br>副词短语：to below $20,000（至不到2万美元）<br>时间状语：where it spent large parts of late that year and into the first weeks of 2023（在那年晚些时候和2023年的头几周大部分时间都维持在该价格以下）</p><p>同样结构的句子例子：</p><ul><li>The stock last reached its peak in August 2021, as it was on its way down to a bear market that lasted until the end of the year.<br>（股市上一次达到峰值是在2021年8月，当时它的价格正在下跌，最终跌至持续到年底的熊市。）</li><li>The company last saw record profits in 2019, as it was on its way down to a financial crisis that would hit the industry the following year.<br>（该公司上一次创下创纪录的利润是在2019年，当时它正在陷入将在随后的一年重创该行业的金融危机中。）</li><li>The economy last experienced a period of sustained growth in the early 2000s, as it was on its way down to a recession that would grip the country for several years.<br>（经济上一次经历了持续增长期是在21世纪初，当时它正在走向一场会让该国陷入数年之久的经济衰退。）</li></ul></li></ul></li><li>It has been hovering around $28,000 for the past three weeks as wary investors gauged the impact of a near banking meltdown, continued inflationary pressures and other macroeconomic uncertainties.<ul><li><p>解析</p><p>这个句子的意思是，比特币的价格在过去三周左右一直在28,000美元左右徘徊，因为谨慎的投资者在评估银行系统几乎崩溃、持续的通货膨胀压力和其他宏观经济不确定因素的影响。</p><p>语法分析：<br>主语：It（指的是比特币的价格）<br>谓语：has been hovering（一直徘徊）<br>状语：around $28,000 for the past three weeks（在过去三周左右一直在28,000美元左右徘徊）<br>从句：as wary investors gauged the impact of a near banking meltdown, continued inflationary pressures and other macroeconomic uncertainties（因为谨慎的投资者在评估银行系统几乎崩溃、持续的通货膨胀压力和其他宏观经济不确定因素的影响）</p><p>同样结构的句子例子：</p><ol><li>She has been studying for the exam for the past two weeks as anxious students gauged the difficulty level.（她已经为考试学习了两周了，因为焦虑的学生在评估难度水平。）</li><li>The stock price has been fluctuating around $50 for the past month as investors assessed the impact of the company’s recent acquisition.（股票价格在过去一个月左右一直在50美元左右波动，因为投资者正在评估公司最近收购的影响。）</li><li>The team has been practicing hard for the upcoming game as the coach analyzed the strengths and weaknesses of the opponent.（球队一直在为即将到来的比赛努力练习，因为教练分析了对手的优势和劣势。）</li></ol></li></ul></li><li>Bitcoin is up about 80% year-to-date after starting 2023 changing hands at about $16,600.<ul><li><p>解析</p><p>这个句子的意思是，比特币自2023年初约定在16,600美元左右后，今年至今已经上涨了约80%。</p><p>语法分析：<br>主语：Bitcoin（比特币）<br>谓语：is up（上涨了）<br>状语：about 80% year-to-date（今年至今已经上涨了约80%）<br>状语：after starting 2023 changing hands at about $16,600（在2023年初约定在16,600美元左右后）</p><p>同样结构的句子例子：</p><ol><li>The company’s revenue is up about 50% year-to-date after starting the year at a low point.（该公司的收入在今年初处于低点后，今年至今已经上涨了约50%。）</li><li>My weight is down about 10 pounds year-to-date after starting the year with an exercise routine.（我今年至今已经减轻了约10磅体重，因为年初开始了一项运动计划。）</li><li>The number of COVID-19 cases is down about 70% year-to-date after starting the year with a surge in infections.（新冠肺炎病例数量今年至今已经下降了约70％，因为年初出现了感染激增的情况。）</li></ol></li></ul></li><li>The crypto surged in January amid signs that inflation was waning, stalled in February but then regained momentum in late March following the failure of Silicon Valley and Signature banks as some investors questioned the stability of the current monetary system and regained their appetite for assets that hold their value.<ul><li><p>解析</p><p>这个句子的意思是，加密货币在1月份暴涨，原因是通胀正在减缓，2月份停滞不前，但在3月底恢复了势头，因为一些投资者质疑当前货币系统的稳定性，重新对能够保持价值的资产产生了兴趣。</p><p>语法分析：<br>主语：The crypto（加密货币）<br>谓语：surged（暴涨）<br>状语：in January（在1月份）<br>状语：amid signs that inflation was waning（在通胀减缓的迹象中）<br>谓语：stalled（停滞不前）<br>状语：in February（在2月份）<br>谓语：regained momentum（恢复了势头）<br>状语：in late March（在3月底）<br>从句：following the failure of Silicon Valley and Signature banks（在硅谷和Signature银行破产后）<br>从句：as some investors questioned the stability of the current monetary system and regained their appetite for assets that hold their value（因为一些投资者质疑当前货币系统的稳定性，重新对能够保持价值的资产产生了兴趣）</p><p>同样结构的句子例子：</p><ol><li>The stock market soared in the first quarter of the year amid hopes of economic recovery, fell slightly in the second quarter, but then rebounded in the third quarter as businesses began to reopen.（股市在年初因为经济复苏的希望而飙升，第二季度略有下跌，但第三季度随着企业开始重新开放而反弹。）</li><li>The popularity of the singer’s latest album declined in the summer, but then picked up again in the fall after she released a new music video.（歌手的最新专辑在夏季的受欢迎程度下降，但在她发布了新的音乐视频后在秋季重新受到了欢迎。）</li><li>The demand for rental cars dropped during the pandemic, but then increased sharply in the spring as more people began traveling again.（在疫情期间，租车需求下降，但随着更多的人重新开始旅行，需求在春季大幅增加。）</li></ol></li></ul></li><li>Gold has also recently spiked, topping $2,000 for the first time since 2020.<ul><li><p>解析</p><p>这个句子的意思是，黄金最近也出现了激增，首次自2020年以来突破了2000美元。</p><p>语法分析：<br>主语：Gold（黄金）<br>谓语：has spiked（出现了激增）<br>状语：also recently（也最近）<br>状语：topping $2,000（达到了2000美元以上）<br>状语：for the first time since 2020（自2020年以来首次）</p><p>同样结构的句子例子：</p><ol><li>The number of COVID-19 cases in the city has surged, surpassing 10,000 for the first time since the start of the pandemic.（该城市的COVID-19病例数量激增，自疫情开始以来首次超过10,000例。）</li><li>Sales of the new smartphone have skyrocketed, exceeding 1 million units in the first week since its release.（新智能手机的销售量激增，在发布的第一周内超过了100万台。）</li><li>The company’s stock price has soared, reaching a record high for the first time since its IPO in 2019.（该公司的股价飙升，自2019年首次公开发行以来达到了历史新高。）</li></ol></li></ul></li><li>Mico noted that there is certainly a narrative shift happening because of this banking crisis that is feeding into Bitcoin’s momentum.<ul><li><p>解析</p><p>这个句子的意思是，Mico指出，由于银行危机的发生，目前正在发生一种叙事转变，这种转变正在助推比特币的势头。</p><p>语法分析：<br>主语：Mico（一个人名，代表某人）<br>谓语：noted（指出）<br>宾语从句：that there is certainly a narrative shift happening because of this banking crisis that is feeding into Bitcoin’s momentum（这种银行危机引发了一种叙事转变，这种转变正在助推比特币的势头）</p><p>同样结构的句子例子：</p><ol><li>The professor noted that there has been a significant increase in the number of students failing their exams due to the pandemic-related disruptions.（教授指出，由于与疫情相关的干扰，不及格学生的数量显著增加。）</li><li>The article noted that there has been a shift in consumer behavior towards more sustainable and ethical products in recent years.（这篇文章指出，近年来，消费者的行为发生了转变，更倾向于购买更具可持续性和道德价值的产品。）</li><li>The speaker noted that there is growing concern among scientists about the long-term impact of climate change on the planet.（演讲者指出，科学家们越来越关注气候变化对地球的长期影响。）</li></ol></li></ul></li><li>Increasingly, “BTC is also being seen as a reliable store of value that lacks the issues that come with storing your money by way of a third-party intermediary, or a bank,” he added.<ul><li><p>解析</p><p>这个句子的意思是，“BTC也越来越被看作是一种可靠的价值存储方式，因为它不存在通过第三方中介或银行存储资金时可能出现的问题，”他补充说。</p><p>语法分析：<br>主语：BTC（比特币）<br>谓语：is also being seen（也被看作）<br>宾语从句：as a reliable store of value that lacks the issues that come with storing your money by way of a third-party intermediary, or a bank（作为一种可靠的价值存储方式，不存在通过第三方中介或银行存储资金时可能出现的问题）</p><p>同样结构的句子例子：</p><ol><li>Electric cars are increasingly being seen as a more sustainable mode of transportation that can help reduce carbon emissions.（电动汽车越来越被视为一种更可持续的交通方式，可以帮助减少碳排放。）</li><li>Online education platforms are increasingly being seen as a viable alternative to traditional classroom-based learning, especially during the pandemic.（在线教育平台越来越被视为传统基于课堂的学习的可行替代方案，尤其是在疫情期间。）</li><li>Renewable energy sources such as solar and wind power are increasingly being seen as a reliable and cost-effective way to meet growing energy demands.（太阳能和风能等可再生能源越来越被视为满足不断增长的能源需求的可靠和经济有效的方式。）</li></ol></li></ul></li><li>“BTC is now properly starting to be perceived as a risk-off asset.”<ul><li><p>解析</p><p>这个句子的意思是，“BTC现在被适当地视为一种风险避险资产。”</p><p>语法分析：<br>主语：BTC（比特币）<br>谓语：is now properly starting to be perceived（现在被适当地视为）<br>宾语：a risk-off asset（一种风险避险资产）</p><p>同样结构的句子例子：</p><ol><li>Treasury bonds are now properly starting to be perceived as a safe haven for investors during times of economic uncertainty.（国债现在被适当地视为投资者在经济不确定时的避难所。）</li><li>Gold is now properly starting to be perceived as a hedge against inflation and a store of value during times of market turbulence.（黄金现在被适当地视为通胀对冲工具和市场动荡时的价值储备。）</li><li>Real estate investment trusts (REITs) are now properly starting to be perceived as a reliable source of income for investors seeking long-term growth opportunities.（房地产投资信托基金（REITs）现在被适当地视为寻求长期增长机会的投资者可靠的收入来源。）</li></ol></li></ul></li><li>“De-dollarization is also increasingly becoming part of the narrative, which is further accelerating BTC adoption,” Mico concluded.<ul><li><p>解析</p><p>这个句子的意思是，“去美元化也越来越成为主题的一部分，这进一步加速了比特币的采用。”</p><p>语法分析：<br>主语：De-dollarization（去美元化）<br>谓语：is also increasingly becoming（也越来越成为）<br>宾语：part of the narrative（主题的一部分）<br>插入语：which（它，指去美元化）<br>谓语：is further accelerating（进一步加速了）<br>宾语：BTC adoption（比特币的采用）</p><p>同样结构的句子例子：</p><ol><li>ESG investing is also increasingly becoming a part of the investment narrative, which is further pushing companies to adopt sustainable practices. （ESG投资也越来越成为投资主题的一部分，这进一步推动企业采用可持续性做法。）</li><li>The growing concern over climate change is also increasingly becoming a part of political discourse, which is further pressuring governments to take action. （对气候变化的日益关注也越来越成为政治话语的一部分，这进一步迫使政府采取行动。）</li><li>In the world of fashion, diversity and inclusivity are also increasingly becoming part of the industry narrative, which is further driving brands to embrace these values. （在时尚界，多元化和包容性也越来越成为行业主题的一部分，这进一步推动品牌拥抱这些价值观。）</li></ol></li></ul></li><li>“With BTC, in short, you are your own bank. It’s difficult to make predictions given the volatility of late, but I wouldn’t be surprised if this momentum regarding BTC continues.”<ul><li><p>解析</p><p>这个句子的意思是，“简而言之，用比特币，你就是你自己的银行。由于最近的波动性，很难做出预测，但如果关于比特币的这种势头继续下去，我不会感到惊讶。”</p><p>语法分析：<br>主语：you（你）<br>谓语：are（是）<br>宾语：your own bank（你自己的银行）<br>插入语：With BTC, in short（简而言之，用比特币）<br>主语：It（它，指关于比特币的势头）<br>谓语：is difficult to make predictions（很难做出预测）<br>宾语：given the volatility of late（鉴于最近的波动性）<br>连词：but（但是）<br>主语：I（我）<br>谓语：wouldn’t be surprised（不会感到惊讶）<br>宾语：if this momentum regarding BTC continues（如果关于比特币的这种势头继续下去）</p><p>同样结构的句子例子：</p><ol><li>With remote work, in short, you are in control of your own schedule. It’s difficult to predict what the future holds, but I wouldn’t be surprised if more companies embrace this way of working. （简而言之，远程工作让你可以掌控自己的日程安排。难以预测未来会带来什么，但如果更多公司采用这种工作方式，我不会感到惊讶。）</li><li>With renewable energy, in short, you are generating your own power. It’s difficult to know how quickly the shift to renewables will happen, but I wouldn’t be surprised if more households and businesses invest in solar panels and other technologies. （简而言之，用可再生能源，你可以发电自用。难以知道向可再生能源的转变会有多快，但如果更多家庭和企业投资太阳能电池板和其他技术，我不会感到惊讶。）</li><li>With electric cars, in short, you are driving a vehicle powered by a battery. It’s difficult to say when electric cars will become the norm, but I wouldn’t be surprised if more people make the switch as prices continue to come down. （简而言之，用电动汽车，你开着一辆由电池提供动力的车辆。很难说电动汽车何时会成为主流，但如果价格继续下降，更多人选择转向电动汽车，我不会感到惊讶。）</li></ol></li></ul></li><li>In an email to CoinDesk, Bob Ras, co-founder of Sologenic, a blockchain-powered network for tokenizing securities, noted that bitcoin had decoupled from stocks and shown “its increasing appeal as a safe haven for investors.”<ul><li><p>解析</p><p>这句话的意思是：在给CoinDesk的电子邮件中，区块链网络Sologenic的联合创始人Bob Ras指出，比特币已经脱离了股票市场，并展现出“作为投资者安全避风港日益增长的吸引力”。</p><p>语法分析：</p><ul><li>In an email to CoinDesk是介词短语，表示发生的场景。</li><li>Bob Ras, co-founder of Sologenic是一个名词短语，用逗号和后面的noted隔开，起到对人物的说明作用。</li><li>noted是动词，表示Bob Ras所做的动作。</li><li>that引导一个宾语从句，表示Bob Ras所说的话。</li><li>bitcoin是主语。</li><li>had decoupled是谓语动词，表示过去的状态，decoupled为过去分词。</li><li>from stocks是介词短语，表示比特币已经与股票脱离关系。</li><li>and连接并列结构，表示比特币脱离股票市场和展现出安全避风港的吸引力。</li><li>shown是谓语动词，表示比特币所展现的状态。</li><li>its increasing appeal是主语补语，表示比特币的吸引力在增长。</li><li>as a safe haven for investors是介词短语，表示比特币作为投资者的安全避风港。</li></ul><p>同样结构的例子：</p><ol><li>In a press release, Mary Smith, CEO of ABC Inc., stated that the company’s sales had increased by 10% this quarter, showing its growing influence in the industry. (在一份新闻稿中，ABC公司的CEO Mary Smith表示，该公司本季度的销售额增长了10％，表明它在行业中的影响力正在增长。)</li><li>In an interview with Bloomberg, John Lee, the CFO of XYZ Corporation, said that the company’s profits had been negatively affected by the pandemic, indicating its vulnerability to economic downturns. (在接受彭博社采访时，XYZ公司的首席财务官John Lee表示，该公司的利润受到了疫情的负面影响，表明其对经济下滑的脆弱性。)</li><li>In a tweet, Elon Musk, CEO of Tesla, announced that the company’s latest electric car model had surpassed all expectations, proving its technological superiority. (在一条推文中，特斯拉的CEO埃隆·马斯克宣布，该公司的最新电动车型已经超越了所有预期，证明了其技术上的优越性。)</li></ol></li></ul></li><li>“While the 2020-2021 period was perceived as Bitcoin’s breakthrough moment, the present time truly marks its ascendance onto the global stage as a formidable asset,” Ras wrote.<ul><li><p>解析</p><p>这句话的意思是：Bob Ras写道，虽然2020年至2021年被认为是比特币的突破时刻，但现在才真正标志着比特币作为一种强大资产登上全球舞台的时刻。</p><p>语法分析：</p><ul><li>While引导一个时间状语从句，表示时间条件。</li><li>the 2020-2021 period是主语，表示2020-2021年期间的时间段。</li><li>was perceived as是谓语动词，表示当时的感知和认知。</li><li>Bitcoin’s breakthrough moment是主语补语，表示比特币的突破时刻。</li><li>the present time是主语，表示现在这个时间。</li><li>truly marks是谓语动词，表示现在标志着比特币的登上全球舞台的时刻。</li><li>its ascendance onto the global stage是宾语补语，表示比特币在全球舞台上的崛起。</li><li>as a formidable asset是介词短语，表示比特币作为一种强大的资产。</li></ul><p>同样结构的例子：</p><ol><li>While the 1990s were seen as the era of technological revolution, the present time truly marks the era of digital transformation. (尽管1990年代被视为技术革命时代，但现在确实标志着数字转型时代的到来。)</li><li>While the 1960s and 1970s were remembered as the golden age of Hollywood, the present time truly marks the rise of international cinema. (虽然60年代和70年代被铭记为好莱坞的黄金时代，但现在确实标志着国际电影的崛起。)</li><li>While the 18th century was known as the age of enlightenment, the present time truly marks the age of artificial intelligence. (虽然18世纪被称为启蒙时代，但现在确实标志着人工智能时代的到来。)</li></ol></li></ul></li><li>“Amidst heightened geopolitical instability, faltering banking systems and mounting concerns surrounding reserve currencies, Bitcoin has emerged as the reliable refuge that many had anticipated. This crucial juncture signifies a pivotal advancement for the digital asset sector.”<ul><li><p>解析</p><p>这句话的意思是：在地缘政治不稳定、银行系统动荡以及储备货币担忧不断升级的情况下，比特币已经成为许多人所预期的可靠避难所。这个关键时刻标志着数字资产领域的一个重要进步。</p><p>语法分析：</p><ul><li>Amidst heightened geopolitical instability, faltering banking systems and mounting concerns surrounding reserve currencies是介词短语，表示环境背景。</li><li>Bitcoin是主语，表示比特币。</li><li>has emerged是谓语动词，表示比特币已经成为。</li><li>as the reliable refuge是介词短语，表示比特币作为可靠的避难所。</li><li>that many had anticipated是定语从句，修饰reliable refuge，表示许多人已经预期过。</li><li>This crucial juncture是主语，表示这个关键时刻。</li><li>signifies是谓语动词，表示标志着。</li><li>a pivotal advancement是宾语补语，表示一个关键的进步。</li><li>for the digital asset sector是介词短语，表示数字资产领域的。</li></ul><p>同样结构的例子：</p><ol><li>Amidst growing concerns over climate change and pollution, electric cars have emerged as a promising solution that many had hoped for. This crucial juncture signifies a pivotal shift towards sustainable transportation. (在全球气候变化和污染日益严重的情况下，电动汽车已经成为许多人所希望的有前途的解决方案。这个关键时刻标志着可持续交通的一个关键转变。)</li><li>Amidst the COVID-19 pandemic and the resulting economic downturn, remote work has emerged as a viable option that many had not considered before. This crucial juncture signifies a pivotal shift towards more flexible and decentralized work arrangements. (在COVID-19大流行和由此导致的经济衰退的背景下，远程工作已经成为一个可行的选项，许多人之前没有考虑过。这个关键时刻标志着更加灵活和分散的工作安排的一个关键转变。)</li><li>Amidst rising political tensions and the threat of cyber attacks, blockchain technology has emerged as a promising solution for secure and transparent record-keeping. This crucial juncture signifies a pivotal advancement for the cybersecurity industry. (在政治紧张局势和网络攻击威胁日益严峻的情况下，区块链技术已经成为安全透明的记录保管的有前途的解决方案。这个关键时刻标志着网络安全行业的一个重要进步。)</li></ol></li></ul></li><li>UPDATE (April 11, 2023, 2:16 UTC): Adds comment from Bob Ras.<ul><li><p>解析</p><p>这个句子是新闻稿的更新部分，意思是：“更新（2023年4月11日，2:16 UTC）：添加了Bob Ras的评论。”</p><p>语法分析：</p><ul><li>UPDATE是主语，表示更新部分。</li><li>(April 11, 2023, 2:16 UTC)是时间状语，表示更新的时间。</li><li>Adds comment from Bob Ras是谓语动词，表示添加了Bob Ras的评论。</li></ul><p>同样结构的例子：</p><ol><li>UPDATE (May 25, 2022, 3:45 PM ET): Adds details on the company’s financial performance. (更新（2022年5月25日，下午3:45 ET）：添加了公司财务表现的细节。)</li><li>UPDATE (November 1, 2021, 10:30 AM PT): Adds statement from the company’s CEO regarding the recent merger. (更新（2021年11月1日，上午10:30 PT）：添加了公司CEO关于最近合并的声明。)</li><li>UPDATE (August 15, 2023, 6:00 PM GMT): Adds response from the government representative to the recent protests. (更新（2023年8月15日，GMT下午6:00）：添加了政府代表对最近抗议活动的回应。)</li></ol></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>英语每日一文</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>我心中有</title>
    <link href="/2023/04/06/%E8%AF%97/%E6%88%91%E5%BF%83%E4%B8%AD%E6%9C%89/"/>
    <url>/2023/04/06/%E8%AF%97/%E6%88%91%E5%BF%83%E4%B8%AD%E6%9C%89/</url>
    
    <content type="html"><![CDATA[<h1 id="我心中有"><a href="#我心中有" class="headerlink" title="我心中有"></a>我心中有</h1><p>我心中有很多奇妙幻想和飞扬的点子</p><p>在最深沉最黑暗的夜里才会开花</p><p>当我意识到我是人的时候</p><p>喜悦溢满流出我的胸膛</p><br/><p>纵然我是颗尘埃无人注意</p><p>但总算和你们有了奇妙分别</p><p>如果你能牵着我思绪的一边线头</p><p>就能和我一起傲游到宇宙尽头</p><br/><p>我的幸福分享给你</p><p>一半 便可填满整个宇宙</p><p>2021年05月16日</p>]]></content>
    
    
    <categories>
      
      <category>诗</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>镜子</title>
    <link href="/2023/04/06/%E8%AF%97/%E9%95%9C%E5%AD%90/"/>
    <url>/2023/04/06/%E8%AF%97/%E9%95%9C%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<h1 id="镜子"><a href="#镜子" class="headerlink" title="镜子"></a>镜子</h1><p>世界上的一切都是镜子</p><p>物质的映出现实的自己</p><p>虚幻的映出理想的自己</p><p>远方是天而脚下的是地</p><br/><p>我是一只徜徉在镜的鱼</p><p>梦想是此生只照哈哈镜</p><p>世界很大前途悠远无尽</p><p>漫看云朵卷舒怡然自乐</p><p>2021年05月13日</p>]]></content>
    
    
    <categories>
      
      <category>诗</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>站在阳光里</title>
    <link href="/2023/04/06/%E8%AF%97/%E7%AB%99%E5%9C%A8%E9%98%B3%E5%85%89%E9%87%8C/"/>
    <url>/2023/04/06/%E8%AF%97/%E7%AB%99%E5%9C%A8%E9%98%B3%E5%85%89%E9%87%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="站在阳光里"><a href="#站在阳光里" class="headerlink" title="站在阳光里"></a>站在阳光里</h1><p>站在阳光里</p><p>我会不会 过度思念你的缘故</p><p>消融在这暖暖阳光</p><p>呆看飞絮红尘</p>]]></content>
    
    
    <categories>
      
      <category>诗</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>remix使用</title>
    <link href="/2023/04/06/Solidity/remix%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/04/06/Solidity/remix%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Remix使用"><a href="#Remix使用" class="headerlink" title="Remix使用"></a>Remix使用</h1><h2 id="左侧栏"><a href="#左侧栏" class="headerlink" title="左侧栏"></a><strong>左侧栏</strong></h2><p>文件夹：</p><ol><li>contracts：放智能合约</li><li>scripts：运行智能合约的脚本</li><li>tests：跑智能合约单元测试用</li></ol><p>SOLIDITY COMPILER：编译器</p><ol><li>COMPILER选项：选择编译器版本</li><li>LANGUAGE选项：选择计算机语言</li><li>EVM VERSION选项：运行环境的选择，有许多版本，每个都行，随便选，一般选default默认版本</li><li>Auto compile勾选：自动编译，修改代码之后会对新的代码自动进行编译</li><li>Enable optimization勾选：优化代码，一般不用改，默认200，但是如果智能合约使用的人很多建议改大一点到1000以上，太小的话gas会很高</li><li>Hide warnings勾选：是否隐藏警告，不用管</li><li>Compile按钮：编译。在文件中选一个智能合约文件，然后点这个按钮可以对它编译</li></ol><p>DEPLOY&amp;RUN TRANSACTIONS：智能合约所部署的环境的相关</p><ol><li>ENVIRONMENT选项：有很多环境可选，JavaScrupt VM是JS虚拟机，运行在本机内存，而Injected Web3就是运行在以太坊测试网，Web3 Provider是本地或者其他网络</li><li>ACCOUNT选项：账户选项，默认会生成十几个账户，每个账户10个以太坊</li><li>GAS LIMIT填空栏：气体限制选择，不知道有啥用</li><li>Deplay按钮：部署合约的按钮，在部署之前，在按钮上面的CONTRACT上选择需要部署的合约，部署成功之后终端里会有一些信息</li></ol>]]></content>
    
    
    <categories>
      
      <category>Solidity</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>remix本地安装</title>
    <link href="/2023/04/06/Solidity/remix%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85/"/>
    <url>/2023/04/06/Solidity/remix%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="reminx本地安装"><a href="#reminx本地安装" class="headerlink" title="reminx本地安装"></a>reminx本地安装</h1><h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a><strong>概论</strong></h2><ol><li>remix分为后端remix-projrct和前端remixd，后端负责编译等事务的实现，前端负责连接网页与本地文件</li><li>先安装前端再安装后端</li><li>remix-project项目地址：<a href="https://github.com/ethereum/remix-project">https://github.com/ethereum/remix-project</a></li><li>remixd项目地址：<a href="https://github.com/ethereum/remixdb">https://github.com/ethereum/remixdb</a></li></ol><hr><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a><strong>部署</strong></h2><ol><li>用docker部署remix-project，先安装：<ol><li>正常来说是这样的命令：docker pull remixproject&#x2F;remix-ide:latest</li><li>对mac，比较特殊，要加一点platform信息，运行这条即可：docker run -p 8080:80 –platform linux&#x2F;amd64 remixproject&#x2F;remix-ide:latest</li></ol></li><li>启动后台remix-project：docker run -p 8080:80 remixproject&#x2F;remix-ide:latest</li><li>此时能通过localhost:8080访问remixIDE，但是为了连接本地服务器需要安装前端remixd</li><li>npm安装remixd，安装过程会有几号之后只能用https的警告，只是npm的官方通知不用理会：npm install remixd -g</li><li>启动remixd，其中中间-s的属性值是本地文件目录可以自行修改，-ide的属性值是访问网址，其中端口号要和安装remix-project时指定的端口相同：remixd -s &#x2F;Users&#x2F;dal&#x2F;Downloads&#x2F;solidity –remix-ide <a href="http://localhost:8080/">http://localhost:8080</a></li><li>尽情使用吧，本地编辑完合约，然后打开网页部署，记得可以在docker客户端里检查remix-project的运行情况确保在后台运行才能打开IDE</li></ol><hr><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a><strong>运行</strong></h2><ol><li>先去docker客户端里运行remixproject&#x2F;remix-ide:latest</li><li>然后启动remix，其中注意本地文件夹目录是可以修改的，其实要修改网址和端口号也是可以的，但是要在安装remix-project那步的时候准备好：remixd -s &#x2F;Users&#x2F;dal&#x2F;Downloads&#x2F;solidity –remix-ide <a href="http://localhost:8080/">http://localhost:8080</a></li><li>访问remix本地客户端：<a href="http://localhost:8080/">http://localhost:8080</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Solidity</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>极简Solidity语法总结</title>
    <link href="/2023/04/06/Solidity/%E6%9E%81%E7%AE%80Solidity%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2023/04/06/Solidity/%E6%9E%81%E7%AE%80Solidity%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="极简Solidity语法总结"><a href="#极简Solidity语法总结" class="headerlink" title="极简Solidity语法总结"></a>极简Solidity语法总结</h1><h2 id="常规语法"><a href="#常规语法" class="headerlink" title="常规语法"></a><strong>常规语法</strong></h2><p>文件结构：【预编译导入，合约库接口】</p><ol><li>预编译：指定编译器版本，语法为 <code>pragma Solidity ^0.4.19;</code>，^是可选的脱字符号，意为这是此主版本号的最新版本</li><li>导入：导入的是其它solidity文件，语法 <code>import ‘xxx.sol’;</code>，还可以用“&#x2F;”引用目录，“.”符号引用当前目录，“..”引用父目录</li><li>合约：<code>contract 合约名 [is 继承语句] &#123;xxx&#125;</code></li><li>库：<code>library 库名 &#123;xxx&#125;</code></li><li>接口：<code>interface 接口名&#123;xxx&#125;</code></li><li>函数：<code>function 函数名([形参表列]) 限定符 [return语句] &#123;xxx&#125;</code></li></ol><p>注释：</p><ol><li>单行注释 <code>//</code>，多行注释 <code>/* */</code></li></ol><p>自定义数据类型：</p><ol><li>结构体：语法为 <code>struct 结构体名&#123;数据类型 变量名; \n 数据类型 变量名; &#125;</code>，实例化一个结构体语法是 <code>结构体名 = 变量名(”ritesh”,10,true, new unit[](3));</code></li></ol><p>基本数据类型：</p><ol><li>概述：基本数据类型还分为值类型和引用类型两种，前者符号memory后者storage，但不是运行在pc里而是EVM网络，值类型存在节点计算机内存里，用完就销毁，索引的时候也是和其它计算机语言一样根据标识符寻找，引用类型经常又称状态变量【应该是借用自函数式编程里面的类似概念】，存储在区块链上网络上，永久存在，根据指针索引。即函数外部声明的变量存储在stoage，内部变量存储在memory</li><li>对引用类型的变量（数组、结构体、字符串、映射），在声明的时候必须指定存储位置</li><li>值类型：<ol><li>布尔型 <code>boll</code>，不能转换为整型，默认false</li><li>无符整型 <code>uint</code>和有符整型 <code>int</code>按8递加，例如最低 <code>uint 8</code>，最高 <code>uint 256</code>，int同</li><li>地址类型 <code>address</code>，20字节，有隐式的balance属性和发送以太币的transfer函数、返回发送以太币是否成功布尔值的send函数、调用合约函数的Call函数、DelegateCall函数、Callcode函数</li><li>数组类型可以任意数据类型，声明语法 <code>数据类型[数量] 数组名</code>，初始化方法在声明的时候 <code>int[5] age = [1,2,3,4,5];</code>，或者先声明 <code>int[5] = 数组名;</code>，再写 <code>数组名 = [1,2,3,4,5];</code>。<ol><li>动态数组：声明的时候不写有多少元素个数 <code>int[] 数组名;</code>，初始化的时候用new关键字 <code>数组名 = new int[] (5);</code></li><li>字节数组：可以容纳任意数量字符的动态数组，声明语法和初始化语法与动态数组一样 <code>bytes[] 数组名;</code>和 <code>数组名 = new bytes[] (5);</code>另外有一种初始化语法是声明语句之后使用赋值语句 <code>数组名 = “xxx”;</code></li><li>字符串数组</li><li>数组里有三个隐式成员属性，但不是每种数组都具有，index只有字符串数组没有，但只有动态数组、固定数组、字节型数组支持写入指定元素index属性，push只有动态数组支持，length只有字符串数组没有，但只有动态数组和字节型数组支持写入此属性</li></ol></li><li>枚举类型声明语法 <code>enum 变量名&#123;枚举值1,枚举值2&#125;</code>，初始化语法太抽象了没看懂，枚举类型不能在函数中声明只能在合约中声明</li><li>字节类型声明的时候要写多少个字节数量，示例 <code>bytes 变量名;</code>，默认值0x00，如果byte1也可以用byte表示，可以用按位操作符</li><li>枚举类型至少声明一个枚举值，第一个编号0，第二个编号1，以此类推</li></ol></li><li>引用类型有数组、结构体、字符串、映射，其中映射就是键值对，声明语法 <code>Mapping (键数据类型 =&gt; 值数据类型) 变量名;</code>，读值语法 <code>变量名[序号]</code>，写值语法变量名 <code>[序号] = &lt;&lt;值&gt;&gt;</code>，映射类型调用是要gas的所以使用时要避免迭代和循环</li><li>字面量：不同字面量的表示方法不同，整型没什么，字符串型单引号或者双引号，地址型0x开头，十六进制数用hex开头并用双引号包裹 <code>hex”1A2B3F”</code>，十进制小数直接点号即可 <code>3.14</code></li></ol><p>运算符：</p><ol><li>比较：相等 <code>==</code>，不相等 <code>!=</code>，大于 <code>&gt;</code>，小于 <code>&lt;</code>，大于等于 <code>&gt;=</code>，小于等于 <code>&lt;=</code></li><li>逻辑：与 <code>&amp;&amp;</code>或 <code>||</code>非 <code>!</code></li></ol><p>程序结构：</p><ol><li>选择：<code>if(条件句1) &#123;xxx&#125;   else if(条件句2) &#123;xxx&#125;   else&#123;xxx&#125;</code></li><li>循环：<code>while(条件句) &#123;xxx&#125;</code>，<code>for(初始化;条件句;自增减) &#123;xxx&#125;</code>，<code>do&#123;xxx&#125;    while(条件句)</code></li><li>break和continue：和C一样</li></ol><p>返回：</p><ol><li>如果函数要有返回值，必须在形参和大括号之间写 <code>returns(返回值类型)</code>，注意有个s，然后在函数体内写return语句 <code>return 变量名;</code>，第二个方法可以允许写多个返回值，这叫元组返回</li></ol><p>面向对象：</p><ol><li>封装：Solidity通过可见性修改器，即限定符来实现封装</li><li>继承：继承会继承所有public和internal的状态变量、函数、修改器、事件，写法是写合约的时候使用is关键字 <code>contract 子合约名 is 父合约名&#123;xxx&#125;</code>，多重继承遵循C3线性化顺序，Solidity合约里所有函数全部具有虚函数性，对没有按默认顺序继承的合约一样可以用 <code>合约名.函数名()</code>来调用函数</li><li>多态：多态即重载，Solidity分函数和合约两种重载，函数多态写法直接写同名函数即可，合约多态实现方法是合约继承</li></ol><p>构造函数：想重写构造函数直接写一个和合约名一样的函数即可，但限定符只能是public或internal，构造函数没有返回值，只在合约部署的时候执行一次【这里也是Solidity和其它计算机语言的区别，前者编译的是区块链上永久存在的字节码，其它语言编译的只是运行的时候用完就丢的二进制编码】。0.4.22之后这种写法被废除，必须使用构造器constructor(),写法是 <code>constructor(…) &#123; … &#125;</code>，不用function，中间也可以加函数限定符public, internal，但是如果合约是继承自父合约，“在派生合约构造函数中添加基合约所需要的参数”，写法是 <code>constructor(…)constructor2(…) &#123; … &#125;</code>，其中 <code>constructor2(…)</code>是父合约的构造函数。两个构造函数都需要指定可见性限定符。</p><p>错误处理：以前只用throw语句进行错误处理，会消耗掉所有gas然后把状态回退到刚初始化，所以4.10版本之后被标记过时，现在使用几个错误处理函数，require函数写在函数体的刚开始，语法 <code>require(条件句);</code>条件句为true接着运行false抛出异常；assert函数语法和作用和require函数一样，用于require函数之后的第二次再判断，但是和throw语句一样会消耗掉所有gas然后把状态回退到刚初始化；revert()语法 <code>assert();</code>作用类似循环体中的berak语句，一般配合if条件判断，满足条件就直接break整个函数体</p><hr><h2 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性"></a><strong>语言特性</strong></h2><ol><li><p>以太坊自然规范注释法：格式为 <code>/// @xxx 注释</code>文本，其中 <code>xxx</code>如果是title意为标题，author意为作者，notice用于解释函数或者合约的作用，dev用于向开发者诉说的话，param用于解释关于形参的信息，return用于解释返回值的信息</p></li><li><p>var类型：隐式类型变量，只能在函数体中使用，会通知编译器为第一次赋予它的值的类型，一旦通知不可修改</p></li><li><p>Solidity不强制规定变量声明和使用的顺序，因为编译器生成字节码的时候第一步会先提取所有变量声明放在顶部</p></li><li><p>数据位置：因为Solidity运行在EVM虚拟机上，所以变量有不同存放位置，状态变量放在存储位置，其永久存在所有节点上，内存位置是所有函数都能访问的本地内存，函数执行完就销毁，传参放在调用位置上，使用以太坊指令集的变量和中间值会存在堆栈位置</p></li><li><p>fallback函数：无名函数，如果调用的函数根本不存在或合约没有收到任何数据例如只收到打过来的以太币时触发，没有名字，无法显式调用，没有传参和返回值，默认消耗2300gas，如果要用它接收以太币要标记payable</p></li><li><p>修改器：修改器专门承接判断某些值以及要不要执行函数这些工作，语法 <code>modifier 修改器名()&#123;xxx&#125;</code>，一般里面接if判断句，其中有个语法糖，<code>_</code>意为替代目标函数，使用修改器写函数首部的形参和大括号之间，语法 <code>function 函数名() 修改器名() 限定符 &#123;xxx&#125;</code></p></li><li><p>事件：链上有一个特殊数据结构叫日志，专门用来记载区块中发生的事件信息，智能合约不能访问，其提供一个事件接口，事件是一个触发器，条件发声就存储抛出异常到交易日志中，声明语法 <code>event 事件名(抛出异常);</code>，其中抛出异常可以是数据类型或者字符串，事件声明之后在整个合约范围内有效，使用方法在函数里写 <code>事件名(所要抛出异常);</code>即可</p></li><li><p>隐式转换：支持从较小类型到较大类型的隐式转换，直接赋值即可</p></li><li><p>显式转换：不鼓励显式转换因为容易出错，但是提供几个显式转换函数，ConvertionExplicitUINT8toUINT256函数、ConvertionExplicitUINT256toUINT8函数、ConvertionExplicitUINT256toUINT81函数分别按函数名字面意思提供从前到后的类型转换，还有一个conversions函数不太明白</p></li><li><p>散列函数：solidity提供散列函数将输入转换为散列，SHA2算法是sha256()，SHA3算法是sha3()和keccak256()，后者是SHA3算法的别名。语法 <code>sha256(”r”)</code>、<code>sha3(”r”)</code>和 <code>keccak256(”r”)</code></p></li><li><p>地址数据类型：外部地址和合约地址都有5个全局函数和一个余额成员变量</p><ol><li>ddress.transfer(uint256 amount)：向指定地址发送以wei做单位的以太币，返回成功与否的布尔值</li><li>address.send(uint256 amount)：向指定地址发送以wei做单位的以太币，返回成功与否的布尔值</li><li>address.call(…)：调用低级别的call函数，返回成功与否的布尔值</li><li>address.callcode(…)：调用低级别的callcode函数，返回成功与否的布尔值</li><li>address.delegatecall(…)：调用低级别的delegatecall函数，返回成功与否的布尔值</li></ol></li><li><p>合约数据类型：合约数据类型提供一个this成员和selfdestruct函数，接收一个地址把钱全部转过去</p></li><li><p>合约内调用已创建合约的两种方法：如果是同一个文件里写了两个合约，第二个合约里用new创建一个新的对象，语法 <code>Hellw world myobj = new Helloworld();</code>。如果想要调用已经部署过的合约，直接把这个合约的地址赋值给地址类型数据即可。</p></li><li><p>方法覆盖对同名函数追加view关键字，这个关键字意思是承诺不修改状态，语法 <code>function 函数名() public view returns(uint)&#123; &#125;</code></p></li><li><p>抽象合约：抽象合约的用途只有被继承，无法创建合约实例，语法是依旧正常的合约结构，但是所有的函数都没有大括号的函数体只有一个分号，例如 <code>function 函数名(形参) public;</code></p></li><li><p>截断模式和检查模式：0.8的新特性，前者使用unchecked关键字后者使用checked，在算数运算中，后者会对运算结果进行溢出（超过数据结构定义的数字上下限）检查，如果超过就抛出异常然后回退，而前者不会，所以前者需要调用第三方库如openzeppelin的safemath.sol。语法上是 <code>unchecked&#123;xxx运算语句&#125;</code>和 <code>checked&#123;xxx运算语句&#125;</code></p></li><li><p>内联汇编：编译的时候solc会优化二进制代码，但有时候尤其是循环语句的时候这种优化是负优化，使用内联汇编语句可以阻止优化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs solidity">assembly&#123;<br> 内联汇编语句<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>abi编码函数：</p></li><li><p>区块和交易全局变量：因为合约无权访问整个账本所以提供一些关于区块和交易的全局变量以供调用，并且没有在合约当中显式声明</p></li></ol><table><thead><tr><th>变量名称</th><th>描述</th></tr></thead><tbody><tr><td>block.coinbase(address)</td><td>与etherbase相同，指矿工的地址</td></tr><tr><td>block.difficulty(uint)</td><td>当前区块难度等级</td></tr><tr><td>block.gaslimit(unit)</td><td>当前区块gas限制</td></tr><tr><td>block.number(unit)</td><td>顺序表示的区块编号</td></tr><tr><td>block.timestamp(unit)</td><td>区块创建时间</td></tr><tr><td>msg.data(bytes)</td><td>与创建交易相关的函数及其参考信息</td></tr><tr><td>msg.gas(uint)</td><td>执行交易后未花费gas</td></tr><tr><td>msg.sender(address)</td><td>调用函数的地址</td></tr><tr><td>msg.sig(bytes4)</td><td>函数标识符使用散列函数签名后的前四个字节</td></tr><tr><td>msg.value(uint)</td><td>随交易发送的以太币数量，以wei作为单位</td></tr><tr><td>now(uint)</td><td>当前时间</td></tr><tr><td>tx.gasprice(uint)</td><td>调用者准备支付的每一种gas单位下的gas价格</td></tr><tr><td>tx.origin(address)</td><td>交易的发起者</td></tr><tr><td>block.blockhash(uint blockNumber)</td><td>包含交易的区块散列值</td></tr><tr><td>returns(bytes32)</td><td>包含交易的区块散列值</td></tr><tr><td>string.concat</td><td>0.8.13版本的新全局变量（可能有误）</td></tr><tr><td>abi.encodeCall</td><td>0.8.13版本的新全局变量（可能有误）</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Solidity</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
